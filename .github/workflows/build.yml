name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
      
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
      STEAMRT_SNAPSHOT: latest-steam-client-general-availability
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Android dependencies
      run: |
        # worst way to embed a shell script
        cd $GITHUB_WORKSPACE
        
        export ANDROID_COMMANDLINE_TOOLS_VER="13114758"
        export ANDROID_BUILD_TOOLS_VER="36.0.0"
        export ANDROID_PLATFORM_VER="android-35"
        export ANDROID_NDK_VERSION="28.2.13676358"
        
        echo "Download JDK 17"
        wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_linux_hotspot_17.0.15_6.tar.gz -qO- | tar -xzf - || exit 1
        export JAVA_HOME=$GITHUB_WORKSPACE/jdk-17.0.15+6
        export PATH=$PATH:$JAVA_HOME/bin
        

        echo "Download Android SDK"
        mkdir -p sdk || exit 1
        pushd sdk
        wget https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_COMMANDLINE_TOOLS_VER}_latest.zip -qO sdk.zip || exit 1
        unzip -q sdk.zip || exit 1
        mv cmdline-tools tools
        mkdir -p cmdline-tools
        mv tools cmdline-tools/tools
        unset ANDROID_SDK_ROOT
        export ANDROID_HOME=$GITHUB_WORKSPACE/sdk
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/tools/bin
        popd
        
        echo "Download all needed tools and Android NDK"
        yes | sdkmanager --licenses > /dev/null 2>/dev/null # who even reads licenses? :)
        sdkmanager --install build-tools\;${ANDROID_BUILD_TOOLS_VER} platform-tools platforms\;${ANDROID_PLATFORM_VER} ndk\;${ANDROID_NDK_VERSION}
    - name: Build for Android
      run: |
        cd android
        ./gradlew assembleRelease

    - name: Extract branch name
      shell: bash
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '_')" >> $GITHUB_OUTPUT
      id: extract_branch
    - name: Extract gamedir
      shell: bash
      run: echo "gamedir=$(grep build/CMakeCache.txt -Ee 'GAMEDIR:STRING=[a-z]+' | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
      id: extract_gamedir
    - name: Upload linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: hlsdk-${{ steps.extract_branch.outputs.branch }}-linux
        path: dist/${{ steps.extract_gamedir.outputs.gamedir }}
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Fetch artifacts
        if: ${{ github.event_name == 'push' && !github.event.pull_request }}
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Remove old release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: ${{ github.event_name == 'push' && !github.event.pull_request }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: continuous-${{ github.ref_name }}
          delete_release: true

      - name: Prepare release
        if: ${{ github.event_name == 'push' && !github.event.pull_request }}
        continue-on-error: true
        run: |
          cd artifacts/
          for i in hlsdk-*; do
            zip -r "$i" "$i"
            rm -rf "$i"
          done
          cd ..
          sleep 20s

      - name: Upload new release
        if: ${{ github.event_name == 'push' && !github.event.pull_request }}
        uses: softprops/action-gh-release@v0.1.15
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: artifacts/hlsdk-*.zip
          tag_name: continuous-${{ github.ref_name }}
          draft: false
          prerelease: true
          name: hlsdk-portable ${{ github.ref_name }} development build
